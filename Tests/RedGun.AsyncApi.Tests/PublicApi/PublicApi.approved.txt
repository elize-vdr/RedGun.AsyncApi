[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/elize-vdr/RedGun.AsyncApi")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"RedGun.AsyncApi.Readers.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001001934709a3bca69283a626f1ac69329a709bf107182ad8d03a085376bd270becbc56b8e29a72f5ccfd2113a582a1ece9ad0a3705bc6022325d7a489e6ef2e54fd9ad79520547f0cd4ecdc241b30e7bb26f85e214ca7bc5fd80181cf4890d7fa3a26eea5f0b564fcdae10e315220852ae68747a024c13829adfefd88317f4656bb")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"RedGun.AsyncApi.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001001934709a3bca69283a626f1ac69329a709bf107182ad8d03a085376bd270becbc56b8e29a72f5ccfd2113a582a1ece9ad0a3705bc6022325d7a489e6ef2e54fd9ad79520547f0cd4ecdc241b30e7bb26f85e214ca7bc5fd80181cf4890d7fa3a26eea5f0b564fcdae10e315220852ae68747a024c13829adfefd88317f4656bb")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")]
namespace RedGun.AsyncApi.Any
{
    public enum AnyType
    {
        Primitive = 0,
        Null = 1,
        Array = 2,
        Object = 3,
    }
    public interface IAsyncApiAny : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtension
    {
        RedGun.AsyncApi.Any.AnyType AnyType { get; }
    }
    public interface IAsyncApiPrimitive : RedGun.AsyncApi.Any.IAsyncApiAny, RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtension
    {
        RedGun.AsyncApi.Any.PrimitiveType PrimitiveType { get; }
    }
    public class AsyncApiArray : System.Collections.Generic.List<RedGun.AsyncApi.Any.IAsyncApiAny>, RedGun.AsyncApi.Any.IAsyncApiAny, RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtension
    {
        public AsyncApiArray() { }
        public RedGun.AsyncApi.Any.AnyType AnyType { get; }
        public void Write(RedGun.AsyncApi.Writers.IAsyncApiWriter writer, RedGun.AsyncApi.AsyncApiSpecVersion specVersion) { }
    }
    public class AsyncApiBinary : RedGun.AsyncApi.Any.AsyncApiPrimitive<byte[]>
    {
        public AsyncApiBinary(byte[] value) { }
        public override RedGun.AsyncApi.Any.PrimitiveType PrimitiveType { get; }
    }
    public class AsyncApiBoolean : RedGun.AsyncApi.Any.AsyncApiPrimitive<bool>
    {
        public AsyncApiBoolean(bool value) { }
        public override RedGun.AsyncApi.Any.PrimitiveType PrimitiveType { get; }
    }
    public class AsyncApiByte : RedGun.AsyncApi.Any.AsyncApiPrimitive<byte[]>
    {
        public AsyncApiByte(byte value) { }
        public AsyncApiByte(byte[] value) { }
        public override RedGun.AsyncApi.Any.PrimitiveType PrimitiveType { get; }
    }
    public class AsyncApiDate : RedGun.AsyncApi.Any.AsyncApiPrimitive<System.DateTime>
    {
        public AsyncApiDate(System.DateTime value) { }
        public override RedGun.AsyncApi.Any.PrimitiveType PrimitiveType { get; }
    }
    public class AsyncApiDateTime : RedGun.AsyncApi.Any.AsyncApiPrimitive<System.DateTimeOffset>
    {
        public AsyncApiDateTime(System.DateTimeOffset value) { }
        public override RedGun.AsyncApi.Any.PrimitiveType PrimitiveType { get; }
    }
    public class AsyncApiDouble : RedGun.AsyncApi.Any.AsyncApiPrimitive<double>
    {
        public AsyncApiDouble(double value) { }
        public override RedGun.AsyncApi.Any.PrimitiveType PrimitiveType { get; }
    }
    public class AsyncApiFloat : RedGun.AsyncApi.Any.AsyncApiPrimitive<float>
    {
        public AsyncApiFloat(float value) { }
        public override RedGun.AsyncApi.Any.PrimitiveType PrimitiveType { get; }
    }
    public class AsyncApiInteger : RedGun.AsyncApi.Any.AsyncApiPrimitive<int>
    {
        public AsyncApiInteger(int value) { }
        public override RedGun.AsyncApi.Any.PrimitiveType PrimitiveType { get; }
    }
    public class AsyncApiLong : RedGun.AsyncApi.Any.AsyncApiPrimitive<long>
    {
        public AsyncApiLong(long value) { }
        public override RedGun.AsyncApi.Any.PrimitiveType PrimitiveType { get; }
    }
    public class AsyncApiNull : RedGun.AsyncApi.Any.IAsyncApiAny, RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtension
    {
        public AsyncApiNull() { }
        public RedGun.AsyncApi.Any.AnyType AnyType { get; }
        public void Write(RedGun.AsyncApi.Writers.IAsyncApiWriter writer, RedGun.AsyncApi.AsyncApiSpecVersion specVersion) { }
    }
    public class AsyncApiObject : System.Collections.Generic.Dictionary<string, RedGun.AsyncApi.Any.IAsyncApiAny>, RedGun.AsyncApi.Any.IAsyncApiAny, RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtension
    {
        public AsyncApiObject() { }
        public RedGun.AsyncApi.Any.AnyType AnyType { get; }
        public void Write(RedGun.AsyncApi.Writers.IAsyncApiWriter writer, RedGun.AsyncApi.AsyncApiSpecVersion specVersion) { }
    }
    public class AsyncApiPassword : RedGun.AsyncApi.Any.AsyncApiPrimitive<string>
    {
        public AsyncApiPassword(string value) { }
        public override RedGun.AsyncApi.Any.PrimitiveType PrimitiveType { get; }
    }
    public abstract class AsyncApiPrimitive<T> : RedGun.AsyncApi.Any.IAsyncApiAny, RedGun.AsyncApi.Any.IAsyncApiPrimitive, RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtension
    {
        public AsyncApiPrimitive(T value) { }
        public RedGun.AsyncApi.Any.AnyType AnyType { get; }
        public abstract RedGun.AsyncApi.Any.PrimitiveType PrimitiveType { get; }
        public T Value { get; }
        public void Write(RedGun.AsyncApi.Writers.IAsyncApiWriter writer, RedGun.AsyncApi.AsyncApiSpecVersion specVersion) { }
    }
    public class AsyncApiString : RedGun.AsyncApi.Any.AsyncApiPrimitive<string>
    {
        public AsyncApiString(string value) { }
        public AsyncApiString(string value, bool isExplicit) { }
        public AsyncApiString(string value, bool isExplicit, bool isRawString) { }
        public override RedGun.AsyncApi.Any.PrimitiveType PrimitiveType { get; }
        public bool IsExplicit() { }
        public bool IsRawString() { }
    }
    public enum PrimitiveType
    {
        Integer = 0,
        Long = 1,
        Float = 2,
        Double = 3,
        String = 4,
        Byte = 5,
        Binary = 6,
        Boolean = 7,
        Date = 8,
        DateTime = 9,
        Password = 10,
    }
}
namespace RedGun.AsyncApi.Exceptions
{
    public class AsyncApiException : System.Exception
    {
        public AsyncApiException() { }
        public AsyncApiException(string message) { }
        public AsyncApiException(string message, System.Exception innerException) { }
        public string Pointer { get; set; }
    }
    public class AsyncApiWriterException : RedGun.AsyncApi.Exceptions.AsyncApiException
    {
        public AsyncApiWriterException() { }
        public AsyncApiWriterException(string message) { }
        public AsyncApiWriterException(string message, System.Exception innerException) { }
    }
}
namespace RedGun.AsyncApi.Expressions
{
    public sealed class BodyExpression : RedGun.AsyncApi.Expressions.SourceExpression
    {
        public const string Body = "body";
        public const string PointerPrefix = "#";
        public BodyExpression() { }
        public BodyExpression(RedGun.AsyncApi.JsonPointer pointer) { }
        public override string Expression { get; }
        public string Fragment { get; }
    }
    public class CompositeExpression : RedGun.AsyncApi.Expressions.RuntimeExpression
    {
        public System.Collections.Generic.List<RedGun.AsyncApi.Expressions.RuntimeExpression> ContainedExpressions;
        public CompositeExpression(string expression) { }
        public override string Expression { get; }
    }
    public class HeaderExpression : RedGun.AsyncApi.Expressions.SourceExpression
    {
        public const string Header = "header.";
        public HeaderExpression(string token) { }
        public override string Expression { get; }
        public string Token { get; }
    }
    public sealed class MethodExpression : RedGun.AsyncApi.Expressions.RuntimeExpression
    {
        public const string Method = "$method";
        public MethodExpression() { }
        public override string Expression { get; }
    }
    public sealed class PathExpression : RedGun.AsyncApi.Expressions.SourceExpression
    {
        public const string Path = "path.";
        public PathExpression(string name) { }
        public override string Expression { get; }
        public string Name { get; }
    }
    public sealed class QueryExpression : RedGun.AsyncApi.Expressions.SourceExpression
    {
        public const string Query = "query.";
        public QueryExpression(string name) { }
        public override string Expression { get; }
        public string Name { get; }
    }
    public sealed class RequestExpression : RedGun.AsyncApi.Expressions.RuntimeExpression
    {
        public const string Request = "$request.";
        public RequestExpression(RedGun.AsyncApi.Expressions.SourceExpression source) { }
        public override string Expression { get; }
        public RedGun.AsyncApi.Expressions.SourceExpression Source { get; }
    }
    public sealed class ResponseExpression : RedGun.AsyncApi.Expressions.RuntimeExpression
    {
        public const string Response = "$response.";
        public ResponseExpression(RedGun.AsyncApi.Expressions.SourceExpression source) { }
        public override string Expression { get; }
        public RedGun.AsyncApi.Expressions.SourceExpression Source { get; }
    }
    public abstract class RuntimeExpression : System.IEquatable<RedGun.AsyncApi.Expressions.RuntimeExpression>
    {
        public const string Prefix = "$";
        protected RuntimeExpression() { }
        public abstract string Expression { get; }
        public bool Equals(RedGun.AsyncApi.Expressions.RuntimeExpression obj) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static RedGun.AsyncApi.Expressions.RuntimeExpression Build(string expression) { }
    }
    public abstract class SourceExpression : RedGun.AsyncApi.Expressions.RuntimeExpression
    {
        protected SourceExpression(string value) { }
        protected string Value { get; }
        public new static RedGun.AsyncApi.Expressions.SourceExpression Build(string expression) { }
    }
    public sealed class StatusCodeExpression : RedGun.AsyncApi.Expressions.RuntimeExpression
    {
        public const string StatusCode = "$statusCode";
        public StatusCodeExpression() { }
        public override string Expression { get; }
    }
    public sealed class UrlExpression : RedGun.AsyncApi.Expressions.RuntimeExpression
    {
        public const string Url = "$url";
        public UrlExpression() { }
        public override string Expression { get; }
    }
}
namespace RedGun.AsyncApi.Extensions
{
    public static class EnumExtensions
    {
        public static T GetAttributeOfType<T>(this System.Enum enumValue)
            where T : System.Attribute { }
        public static string GetDisplayName(this System.Enum enumValue) { }
    }
    public static class AsyncApiElementExtensions
    {
        public static System.Collections.Generic.IEnumerable<RedGun.AsyncApi.Models.AsyncApiError> Validate(this RedGun.AsyncApi.Interfaces.IAsyncApiElement element, RedGun.AsyncApi.Validations.ValidationRuleSet ruleSet) { }
    }
    public static class AsyncApiExtensibleExtensions
    {
        public static void AddExtension<T>(this T element, string name, RedGun.AsyncApi.Interfaces.IAsyncApiExtension any)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiExtensible { }
    }
    public static class AsyncApiReferencableExtensions
    {
        public static RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable ResolveReference(this RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable element, RedGun.AsyncApi.JsonPointer pointer) { }
    }
    public static class AsyncApiSerializableExtensions
    {
        public static string Serialize<T>(this T element, RedGun.AsyncApi.AsyncApiSpecVersion specVersion, RedGun.AsyncApi.AsyncApiFormat format)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiSerializable { }
        public static void Serialize<T>(this T element, RedGun.AsyncApi.Writers.IAsyncApiWriter writer, RedGun.AsyncApi.AsyncApiSpecVersion specVersion)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiSerializable { }
        public static void Serialize<T>(this T element, System.IO.Stream stream, RedGun.AsyncApi.AsyncApiSpecVersion specVersion, RedGun.AsyncApi.AsyncApiFormat format)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiSerializable { }
        public static void Serialize<T>(this T element, System.IO.Stream stream, RedGun.AsyncApi.AsyncApiSpecVersion specVersion, RedGun.AsyncApi.AsyncApiFormat format, RedGun.AsyncApi.Writers.AsyncApiWriterSettings settings)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiSerializable { }
        public static string SerializeAsJson<T>(this T element, RedGun.AsyncApi.AsyncApiSpecVersion specVersion)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiSerializable { }
        public static void SerializeAsJson<T>(this T element, System.IO.Stream stream, RedGun.AsyncApi.AsyncApiSpecVersion specVersion)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiSerializable { }
        public static string SerializeAsYaml<T>(this T element, RedGun.AsyncApi.AsyncApiSpecVersion specVersion)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiSerializable { }
        public static void SerializeAsYaml<T>(this T element, System.IO.Stream stream, RedGun.AsyncApi.AsyncApiSpecVersion specVersion)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiSerializable { }
    }
    public static class StringExtensions
    {
        public static T GetEnumFromDisplayName<T>(this string displayName) { }
    }
}
namespace RedGun.AsyncApi.Interfaces
{
    public interface IAsyncApiElement { }
    public interface IAsyncApiExtensible : RedGun.AsyncApi.Interfaces.IAsyncApiElement
    {
        System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
    }
    public interface IAsyncApiExtension
    {
        void Write(RedGun.AsyncApi.Writers.IAsyncApiWriter writer, RedGun.AsyncApi.AsyncApiSpecVersion specVersion);
    }
    public interface IAsyncApiReferenceable : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        RedGun.AsyncApi.Models.AsyncApiReference Reference { get; set; }
        bool UnresolvedReference { get; set; }
        void SerializeAsV2WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer);
        void SerializeAsV3WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer);
    }
    public interface IAsyncApiSerializable : RedGun.AsyncApi.Interfaces.IAsyncApiElement
    {
        void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer);
        void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer);
    }
}
namespace RedGun.AsyncApi
{
    public class JsonPointer
    {
        public JsonPointer(string pointer) { }
        public RedGun.AsyncApi.JsonPointer ParentPointer { get; }
        public string[] Tokens { get; }
        public override string ToString() { }
    }
    public enum AsyncApiFormat
    {
        Json = 0,
        Yaml = 1,
    }
    public enum AsyncApiSpecVersion
    {
        AsyncApi2_0 = 0,
        AsyncApi3_0 = 1,
    }
}
namespace RedGun.AsyncApi.Models
{
    public class AsyncApiCallback : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiCallback() { }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public System.Collections.Generic.Dictionary<RedGun.AsyncApi.Expressions.RuntimeExpression, RedGun.AsyncApi.Models.AsyncApiPathItem> PathItems { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiReference Reference { get; set; }
        public bool UnresolvedReference { get; set; }
        public void AddPathItem(RedGun.AsyncApi.Expressions.RuntimeExpression expression, RedGun.AsyncApi.Models.AsyncApiPathItem pathItem) { }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV2WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiComponents : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiComponents() { }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiCallback> Callbacks { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiExample> Examples { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiHeader> Headers { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiLink> Links { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiParameter> Parameters { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiRequestBody> RequestBodies { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiResponse> Responses { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiSchema> Schemas { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiSecurityScheme> SecuritySchemes { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public static class AsyncApiConstants
    {
        public const string AccessCode = "accessCode";
        public const string AdditionalProperties = "additionalProperties";
        public const string AllOf = "allOf";
        public const string AllowEmptyValue = "allowEmptyValue";
        public const string AllowReserved = "allowReserved";
        public const string AnyOf = "anyOf";
        public const string Application = "application";
        public const string Attribute = "attribute";
        public const string AuthorizationCode = "authorizationCode";
        public const string AuthorizationUrl = "authorizationUrl";
        public const string BasePath = "basePath";
        public const string Basic = "basic";
        public const string BearerFormat = "bearerFormat";
        public const string BodyName = "x-bodyName";
        public const string Callbacks = "callbacks";
        public const string ClientCredentials = "clientCredentials";
        public const string Components = "components";
        public const string Consumes = "consumes";
        public const string Contact = "contact";
        public const string Content = "content";
        public const string ContentType = "contentType";
        public const string Default = "default";
        public const string DefaultDefault = "Default Default";
        public const string DefaultDescription = "Default Description";
        public const string DefaultName = "Default Name";
        public const string DefaultTitle = "Default Title";
        public const string Definitions = "definitions";
        public const string Delete = "delete";
        public const string Deprecated = "deprecated";
        public const string Description = "description";
        public const string Discriminator = "discriminator";
        public const string DollarRef = "$ref";
        public const string Email = "email";
        public const string Encoding = "encoding";
        public const string Enum = "enum";
        public const string Example = "example";
        public const string Examples = "examples";
        public const string ExclusiveMaximum = "exclusiveMaximum";
        public const string ExclusiveMinimum = "exclusiveMinimum";
        public const string Explode = "explode";
        public const string ExtensionFieldNamePrefix = "x-";
        public const string ExternalDocs = "externalDocs";
        public const string ExternalValue = "externalValue";
        public const string Flow = "flow";
        public const string Flows = "flows";
        public const string Format = "format";
        public const string Get = "get";
        public const string Head = "head";
        public const string Headers = "headers";
        public const string Host = "host";
        public const string Implicit = "implicit";
        public const string In = "in";
        public const string Info = "info";
        public const string Items = "items";
        public const string License = "license";
        public const string Links = "links";
        public const string Mapping = "mapping";
        public const string MaxItems = "maxItems";
        public const string MaxLength = "maxLength";
        public const string MaxProperties = "maxProperties";
        public const string Maximum = "maximum";
        public const string MinItems = "minItems";
        public const string MinLength = "minLength";
        public const string MinProperties = "minProperties";
        public const string Minimum = "minimum";
        public const string MultipleOf = "multipleOf";
        public const string Name = "name";
        public const string Namespace = "namespace";
        public const string Not = "not";
        public const string Nullable = "nullable";
        public const string OneOf = "oneOf";
        public const string AsyncApi = "AsyncApi";
        public const string OpenIdConnectUrl = "openIdConnectUrl";
        public const string OperationId = "operationId";
        public const string OperationRef = "operationRef";
        public const string Options = "options";
        public const string Parameters = "parameters";
        public const string Password = "password";
        public const string Patch = "patch";
        public const string Paths = "paths";
        public const string Pattern = "pattern";
        public const string Post = "post";
        public const string Prefix = "prefix";
        public const string Produces = "produces";
        public const string Properties = "properties";
        public const string PropertyName = "propertyName";
        public const string Put = "put";
        public const string ReadOnly = "readOnly";
        public const string RefreshUrl = "refreshUrl";
        public const string RequestBodies = "requestBodies";
        public const string RequestBody = "requestBody";
        public const string Required = "required";
        public const string Responses = "responses";
        public const string Schema = "schema";
        public const string Schemas = "schemas";
        public const string Scheme = "scheme";
        public const string Schemes = "schemes";
        public const string Scopes = "scopes";
        public const string Security = "security";
        public const string SecurityDefinitions = "securityDefinitions";
        public const string SecuritySchemes = "securitySchemes";
        public const string Server = "server";
        public const string Servers = "servers";
        public const string Style = "style";
        public const string Summary = "summary";
        public const string Swagger = "swagger";
        public const string Tags = "tags";
        public const string TermsOfService = "termsOfService";
        public const string Title = "title";
        public const string TokenUrl = "tokenUrl";
        public const string Trace = "trace";
        public const string Type = "type";
        public const string UniqueItems = "uniqueItems";
        public const string Url = "url";
        public const string Value = "value";
        public const string Variables = "variables";
        public const string Version = "version";
        public const string Wrapped = "wrapped";
        public const string WriteOnly = "writeOnly";
        public const string Xml = "xml";
        public static readonly System.Uri defaultUrl;
        public static readonly System.Version version2_0;
        public static readonly System.Version version3_0_0;
    }
    public class AsyncApiContact : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiContact() { }
        public string Email { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public string Name { get; set; }
        public System.Uri Url { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiDiscriminator : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiDiscriminator() { }
        public System.Collections.Generic.IDictionary<string, string> Mapping { get; set; }
        public string PropertyName { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiDocument : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiDocument() { }
        public RedGun.AsyncApi.Models.AsyncApiComponents Components { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiExternalDocs ExternalDocs { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiInfo Info { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiPaths Paths { get; set; }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiSecurityRequirement> SecurityRequirements { get; set; }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiServer> Servers { get; set; }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiTag> Tags { get; set; }
        public RedGun.AsyncApi.Services.AsyncApiWorkspace Workspace { get; set; }
        public RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable ResolveReference(RedGun.AsyncApi.Models.AsyncApiReference reference) { }
        public RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable ResolveReference(RedGun.AsyncApi.Models.AsyncApiReference reference, bool useExternal) { }
        public System.Collections.Generic.IEnumerable<RedGun.AsyncApi.Models.AsyncApiError> ResolveReferences(bool useExternal = false) { }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiEncoding : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiEncoding() { }
        public bool? AllowReserved { get; set; }
        public string ContentType { get; set; }
        public bool? Explode { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiHeader> Headers { get; set; }
        public RedGun.AsyncApi.Models.ParameterStyle? Style { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiError
    {
        public AsyncApiError(RedGun.AsyncApi.Exceptions.AsyncApiException exception) { }
        public AsyncApiError(string pointer, string message) { }
        public string Message { get; set; }
        public string Pointer { get; set; }
        public override string ToString() { }
    }
    public class AsyncApiExample : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiExample() { }
        public string Description { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public string ExternalValue { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiReference Reference { get; set; }
        public string Summary { get; set; }
        public bool UnresolvedReference { get; set; }
        public RedGun.AsyncApi.Any.IAsyncApiAny Value { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV2WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public abstract class AsyncApiExtensibleDictionary<T> : System.Collections.Generic.Dictionary<string, T>, RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
        where T : RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        protected AsyncApiExtensibleDictionary() { }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiExternalDocs : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiExternalDocs() { }
        public string Description { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public System.Uri Url { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiHeader : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiHeader() { }
        public bool AllowEmptyValue { get; set; }
        public bool AllowReserved { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiMediaType> Content { get; set; }
        public bool Deprecated { get; set; }
        public string Description { get; set; }
        public RedGun.AsyncApi.Any.IAsyncApiAny Example { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiExample> Examples { get; set; }
        public bool Explode { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiReference Reference { get; set; }
        public bool Required { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiSchema Schema { get; set; }
        public RedGun.AsyncApi.Models.ParameterStyle? Style { get; set; }
        public bool UnresolvedReference { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV2WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiInfo : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiInfo() { }
        public RedGun.AsyncApi.Models.AsyncApiContact Contact { get; set; }
        public string Description { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiLicense License { get; set; }
        public System.Uri TermsOfService { get; set; }
        public string Title { get; set; }
        public string Version { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiLicense : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiLicense() { }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public string Name { get; set; }
        public System.Uri Url { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiLink : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiLink() { }
        public string Description { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public string OperationId { get; set; }
        public string OperationRef { get; set; }
        public System.Collections.Generic.Dictionary<string, RedGun.AsyncApi.Models.RuntimeExpressionAnyWrapper> Parameters { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiReference Reference { get; set; }
        public RedGun.AsyncApi.Models.RuntimeExpressionAnyWrapper RequestBody { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiServer Server { get; set; }
        public bool UnresolvedReference { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV2WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiMediaType : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiMediaType() { }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiEncoding> Encoding { get; set; }
        public RedGun.AsyncApi.Any.IAsyncApiAny Example { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiExample> Examples { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiSchema Schema { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiOAuthFlow : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiOAuthFlow() { }
        public System.Uri AuthorizationUrl { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public System.Uri RefreshUrl { get; set; }
        public System.Collections.Generic.IDictionary<string, string> Scopes { get; set; }
        public System.Uri TokenUrl { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiOAuthFlows : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiOAuthFlows() { }
        public RedGun.AsyncApi.Models.AsyncApiOAuthFlow AuthorizationCode { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiOAuthFlow ClientCredentials { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiOAuthFlow Implicit { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiOAuthFlow Password { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiOperation : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public const bool DeprecatedDefault = false;
        public AsyncApiOperation() { }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiCallback> Callbacks { get; set; }
        public bool Deprecated { get; set; }
        public string Description { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiExternalDocs ExternalDocs { get; set; }
        public string OperationId { get; set; }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiParameter> Parameters { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiRequestBody RequestBody { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiResponses Responses { get; set; }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiSecurityRequirement> Security { get; set; }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiServer> Servers { get; set; }
        public string Summary { get; set; }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiTag> Tags { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiParameter : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiParameter() { }
        public bool AllowEmptyValue { get; set; }
        public bool AllowReserved { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiMediaType> Content { get; set; }
        public bool Deprecated { get; set; }
        public string Description { get; set; }
        public RedGun.AsyncApi.Any.IAsyncApiAny Example { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiExample> Examples { get; set; }
        public bool Explode { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public RedGun.AsyncApi.Models.ParameterLocation? In { get; set; }
        public string Name { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiReference Reference { get; set; }
        public bool Required { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiSchema Schema { get; set; }
        public RedGun.AsyncApi.Models.ParameterStyle? Style { get; set; }
        public bool UnresolvedReference { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV2WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiPathItem : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiPathItem() { }
        public string Description { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public System.Collections.Generic.IDictionary<RedGun.AsyncApi.Models.OperationType, RedGun.AsyncApi.Models.AsyncApiOperation> Operations { get; set; }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiParameter> Parameters { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiReference Reference { get; set; }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiServer> Servers { get; set; }
        public string Summary { get; set; }
        public bool UnresolvedReference { get; set; }
        public void AddOperation(RedGun.AsyncApi.Models.OperationType operationType, RedGun.AsyncApi.Models.AsyncApiOperation operation) { }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV2WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiPaths : RedGun.AsyncApi.Models.AsyncApiExtensibleDictionary<RedGun.AsyncApi.Models.AsyncApiPathItem>
    {
        public AsyncApiPaths() { }
    }
    public class AsyncApiReference : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiReference() { }
        public string ExternalResource { get; set; }
        public string Id { get; set; }
        public bool IsExternal { get; }
        public bool IsLocal { get; }
        public string ReferenceV2 { get; }
        public string ReferenceV3 { get; }
        public RedGun.AsyncApi.Models.ReferenceType? Type { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiRequestBody : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiRequestBody() { }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiMediaType> Content { get; set; }
        public string Description { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiReference Reference { get; set; }
        public bool Required { get; set; }
        public bool UnresolvedReference { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV2WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiResponse : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiResponse() { }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiMediaType> Content { get; set; }
        public string Description { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiHeader> Headers { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiLink> Links { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiReference Reference { get; set; }
        public bool UnresolvedReference { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV2WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiResponses : RedGun.AsyncApi.Models.AsyncApiExtensibleDictionary<RedGun.AsyncApi.Models.AsyncApiResponse>
    {
        public AsyncApiResponses() { }
    }
    public class AsyncApiSchema : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiSchema() { }
        public RedGun.AsyncApi.Models.AsyncApiSchema AdditionalProperties { get; set; }
        public bool AdditionalPropertiesAllowed { get; set; }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiSchema> AllOf { get; set; }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiSchema> AnyOf { get; set; }
        public RedGun.AsyncApi.Any.IAsyncApiAny Default { get; set; }
        public bool Deprecated { get; set; }
        public string Description { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiDiscriminator Discriminator { get; set; }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Any.IAsyncApiAny> Enum { get; set; }
        public RedGun.AsyncApi.Any.IAsyncApiAny Example { get; set; }
        public bool? ExclusiveMaximum { get; set; }
        public bool? ExclusiveMinimum { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiExternalDocs ExternalDocs { get; set; }
        public string Format { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiSchema Items { get; set; }
        public int? MaxItems { get; set; }
        public int? MaxLength { get; set; }
        public int? MaxProperties { get; set; }
        public decimal? Maximum { get; set; }
        public int? MinItems { get; set; }
        public int? MinLength { get; set; }
        public int? MinProperties { get; set; }
        public decimal? Minimum { get; set; }
        public decimal? MultipleOf { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiSchema Not { get; set; }
        public bool Nullable { get; set; }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiSchema> OneOf { get; set; }
        public string Pattern { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiSchema> Properties { get; set; }
        public bool ReadOnly { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiReference Reference { get; set; }
        public System.Collections.Generic.ISet<string> Required { get; set; }
        public string Title { get; set; }
        public string Type { get; set; }
        public bool? UniqueItems { get; set; }
        public bool UnresolvedReference { get; set; }
        public bool WriteOnly { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiXml Xml { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV2WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiSecurityRequirement : System.Collections.Generic.Dictionary<RedGun.AsyncApi.Models.AsyncApiSecurityScheme, System.Collections.Generic.IList<string>>, RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiSecurityRequirement() { }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiSecurityScheme : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiSecurityScheme() { }
        public string BearerFormat { get; set; }
        public string Description { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiOAuthFlows Flows { get; set; }
        public RedGun.AsyncApi.Models.ParameterLocation In { get; set; }
        public string Name { get; set; }
        public System.Uri OpenIdConnectUrl { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiReference Reference { get; set; }
        public string Scheme { get; set; }
        public RedGun.AsyncApi.Models.SecuritySchemeType Type { get; set; }
        public bool UnresolvedReference { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV2WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiServer : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiServer() { }
        public string Description { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public string Url { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiServerVariable> Variables { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiServerVariable : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiServerVariable() { }
        public string Default { get; set; }
        public string Description { get; set; }
        public System.Collections.Generic.List<string> Enum { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiTag : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiTag() { }
        public string Description { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiExternalDocs ExternalDocs { get; set; }
        public string Name { get; set; }
        public RedGun.AsyncApi.Models.AsyncApiReference Reference { get; set; }
        public bool UnresolvedReference { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV2WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3WithoutReference(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public class AsyncApiXml : RedGun.AsyncApi.Interfaces.IAsyncApiElement, RedGun.AsyncApi.Interfaces.IAsyncApiExtensible, RedGun.AsyncApi.Interfaces.IAsyncApiSerializable
    {
        public AsyncApiXml() { }
        public bool Attribute { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> Extensions { get; set; }
        public string Name { get; set; }
        public System.Uri Namespace { get; set; }
        public string Prefix { get; set; }
        public bool Wrapped { get; set; }
        public void SerializeAsV2(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
        public void SerializeAsV3(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public enum OperationType
    {
        Get = 0,
        Put = 1,
        Post = 2,
        Delete = 3,
        Options = 4,
        Head = 5,
        Patch = 6,
        Trace = 7,
    }
    public enum ParameterLocation
    {
        Query = 0,
        Header = 1,
        Path = 2,
        Cookie = 3,
    }
    public enum ParameterStyle
    {
        Matrix = 0,
        Label = 1,
        Form = 2,
        Simple = 3,
        SpaceDelimited = 4,
        PipeDelimited = 5,
        DeepObject = 6,
    }
    public enum ReferenceType
    {
        Schema = 0,
        Response = 1,
        Parameter = 2,
        Example = 3,
        RequestBody = 4,
        Header = 5,
        SecurityScheme = 6,
        Link = 7,
        Callback = 8,
        Tag = 9,
    }
    public class RuntimeExpressionAnyWrapper : RedGun.AsyncApi.Interfaces.IAsyncApiElement
    {
        public RuntimeExpressionAnyWrapper() { }
        public RedGun.AsyncApi.Any.IAsyncApiAny Any { get; set; }
        public RedGun.AsyncApi.Expressions.RuntimeExpression Expression { get; set; }
        public void WriteValue(RedGun.AsyncApi.Writers.IAsyncApiWriter writer) { }
    }
    public enum SecuritySchemeType
    {
        ApiKey = 0,
        Http = 1,
        OAuth2 = 2,
        OpenIdConnect = 3,
    }
}
namespace RedGun.AsyncApi.Services
{
    public class CurrentKeys
    {
        public CurrentKeys() { }
        public string Callback { get; set; }
        public string Content { get; set; }
        public string Encoding { get; }
        public string Example { get; }
        public string Extension { get; }
        public string Header { get; }
        public string Link { get; set; }
        public RedGun.AsyncApi.Models.OperationType? Operation { get; set; }
        public string Path { get; set; }
        public string Response { get; set; }
        public string ServerVariable { get; }
    }
    public class AsyncApiReferenceError : RedGun.AsyncApi.Models.AsyncApiError
    {
        public AsyncApiReferenceError(RedGun.AsyncApi.Exceptions.AsyncApiException exception) { }
        public AsyncApiReferenceError(RedGun.AsyncApi.Models.AsyncApiReference reference, string message) { }
    }
    public class AsyncApiUrlTreeNode
    {
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.List<string>> AdditionalData { get; set; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Services.AsyncApiUrlTreeNode> Children { get; }
        public bool IsParameter { get; }
        public string Path { get; }
        public System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiPathItem> PathItems { get; }
        public string Segment { get; }
        public void AddAdditionalData(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> additionalData) { }
        public void Attach(RedGun.AsyncApi.Models.AsyncApiDocument doc, string label) { }
        public RedGun.AsyncApi.Services.AsyncApiUrlTreeNode Attach(string path, RedGun.AsyncApi.Models.AsyncApiPathItem pathItem, string label) { }
        public bool HasOperations(string label) { }
        public static RedGun.AsyncApi.Services.AsyncApiUrlTreeNode Create() { }
        public static RedGun.AsyncApi.Services.AsyncApiUrlTreeNode Create(RedGun.AsyncApi.Models.AsyncApiDocument doc, string label) { }
    }
    public abstract class AsyncApiVisitorBase
    {
        protected AsyncApiVisitorBase() { }
        public RedGun.AsyncApi.Services.CurrentKeys CurrentKeys { get; }
        public string PathString { get; }
        public void Enter(string segment) { }
        public void Exit() { }
        public virtual void Visit(RedGun.AsyncApi.Interfaces.IAsyncApiExtensible AsyncApiExtensible) { }
        public virtual void Visit(RedGun.AsyncApi.Interfaces.IAsyncApiExtension AsyncApiExtension) { }
        public virtual void Visit(RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable referenceable) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiCallback callback) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiComponents components) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiContact contact) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiDocument doc) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiEncoding encoding) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiExample example) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiExternalDocs externalDocs) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiHeader tag) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiInfo info) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiLicense license) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiLink link) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiMediaType mediaType) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiOAuthFlow AsyncApiOAuthFlow) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiOperation operation) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiParameter parameter) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiPathItem pathItem) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiPaths paths) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiRequestBody requestBody) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiResponse response) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiResponses response) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiSchema schema) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiSecurityRequirement securityRequirement) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiSecurityScheme securityScheme) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiServer server) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiServerVariable serverVariable) { }
        public virtual void Visit(RedGun.AsyncApi.Models.AsyncApiTag tag) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<RedGun.AsyncApi.Models.OperationType, RedGun.AsyncApi.Models.AsyncApiOperation> operations) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiCallback> callbacks) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiEncoding> encodings) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiExample> examples) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiHeader> headers) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiLink> links) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiMediaType> content) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Models.AsyncApiServerVariable> serverVariables) { }
        public virtual void Visit(System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiExample> example) { }
        public virtual void Visit(System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiParameter> parameters) { }
        public virtual void Visit(System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiSecurityRequirement> AsyncApiSecurityRequirements) { }
        public virtual void Visit(System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiServer> servers) { }
        public virtual void Visit(System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiTag> AsyncApiTags) { }
    }
    public class AsyncApiWalker
    {
        public AsyncApiWalker(RedGun.AsyncApi.Services.AsyncApiVisitorBase visitor) { }
        public void Walk(RedGun.AsyncApi.Models.AsyncApiDocument doc) { }
    }
    public class AsyncApiWorkspace
    {
        public AsyncApiWorkspace() { }
        public AsyncApiWorkspace(System.Uri baseUrl) { }
        public System.Collections.Generic.IEnumerable<System.IO.Stream> Artifacts { get; }
        public System.Uri BaseUrl { get; }
        public System.Collections.Generic.IEnumerable<RedGun.AsyncApi.Models.AsyncApiDocument> Documents { get; }
        public System.Collections.Generic.IEnumerable<RedGun.AsyncApi.Interfaces.IAsyncApiElement> Fragments { get; }
        public void AddArtifact(string location, System.IO.Stream artifact) { }
        public void AddDocument(string location, RedGun.AsyncApi.Models.AsyncApiDocument document) { }
        public void AddFragment(string location, RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable fragment) { }
        public bool Contains(string location) { }
        public System.IO.Stream GetArtifact(string location) { }
        public RedGun.AsyncApi.Interfaces.IAsyncApiReferenceable ResolveReference(RedGun.AsyncApi.Models.AsyncApiReference reference) { }
    }
}
namespace RedGun.AsyncApi.Validations
{
    public interface IValidationContext
    {
        string PathString { get; }
        void AddError(RedGun.AsyncApi.Validations.AsyncApiValidatorError error);
        void Enter(string segment);
        void Exit();
    }
    public class AsyncApiValidator : RedGun.AsyncApi.Services.AsyncApiVisitorBase, RedGun.AsyncApi.Validations.IValidationContext
    {
        public AsyncApiValidator(RedGun.AsyncApi.Validations.ValidationRuleSet ruleSet) { }
        public System.Collections.Generic.IEnumerable<RedGun.AsyncApi.Validations.AsyncApiValidatorError> Errors { get; }
        public void AddError(RedGun.AsyncApi.Validations.AsyncApiValidatorError error) { }
        public override void Visit(RedGun.AsyncApi.Interfaces.IAsyncApiExtensible item) { }
        public override void Visit(RedGun.AsyncApi.Interfaces.IAsyncApiExtension item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiCallback item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiComponents item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiContact item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiDocument item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiEncoding item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiExternalDocs item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiHeader item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiInfo item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiLicense item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiMediaType item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiOAuthFlow item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiParameter item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiResponse item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiResponses item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiSchema item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiServer item) { }
        public override void Visit(RedGun.AsyncApi.Models.AsyncApiTag item) { }
        public override void Visit(System.Collections.Generic.IList<RedGun.AsyncApi.Models.AsyncApiExample> items) { }
    }
    public class AsyncApiValidatorError : RedGun.AsyncApi.Models.AsyncApiError
    {
        public AsyncApiValidatorError(string ruleName, string pointer, string message) { }
        public string RuleName { get; set; }
    }
    public static class ValidationContextExtensions
    {
        public static void CreateError(this RedGun.AsyncApi.Validations.IValidationContext context, string ruleName, string message) { }
    }
    public abstract class ValidationRule
    {
        protected ValidationRule() { }
    }
    public sealed class ValidationRuleSet : System.Collections.Generic.IEnumerable<RedGun.AsyncApi.Validations.ValidationRule>, System.Collections.IEnumerable
    {
        public ValidationRuleSet() { }
        public ValidationRuleSet(RedGun.AsyncApi.Validations.ValidationRuleSet ruleSet) { }
        public ValidationRuleSet(System.Collections.Generic.IEnumerable<RedGun.AsyncApi.Validations.ValidationRule> rules) { }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Validations.ValidationRule> Rules { get; }
        public void Add(RedGun.AsyncApi.Validations.ValidationRule rule) { }
        public System.Collections.Generic.IList<RedGun.AsyncApi.Validations.ValidationRule> FindRules(System.Type type) { }
        public System.Collections.Generic.IEnumerator<RedGun.AsyncApi.Validations.ValidationRule> GetEnumerator() { }
        public static RedGun.AsyncApi.Validations.ValidationRuleSet GetDefaultRuleSet() { }
        public static RedGun.AsyncApi.Validations.ValidationRuleSet GetEmptyRuleSet() { }
    }
    public class ValidationRule<T> : RedGun.AsyncApi.Validations.ValidationRule
        where T : RedGun.AsyncApi.Interfaces.IAsyncApiElement
    {
        public ValidationRule(System.Action<RedGun.AsyncApi.Validations.IValidationContext, T> validate) { }
    }
}
namespace RedGun.AsyncApi.Validations.Rules
{
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiComponentsRules
    {
        public static System.Text.RegularExpressions.Regex KeyRegex;
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiComponents> KeyMustBeRegularExpression { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiContactRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiContact> EmailMustBeEmailFormat { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiDocumentRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiDocument> AsyncApiDocumentFieldIsMissing { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiExtensibleRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Interfaces.IAsyncApiExtensible> ExtensionNameMustStartWithXDash { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiExternalDocsRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiExternalDocs> UrlIsRequired { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiHeaderRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiHeader> HeaderMismatchedDataType { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiInfoRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiInfo> InfoRequiredFields { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiLicenseRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiLicense> LicenseRequiredFields { get; }
    }
    public static class AsyncApiMediaTypeRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiMediaType> MediaTypeMismatchedDataType { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiOAuthFlowRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiOAuthFlow> OAuthFlowRequiredFields { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiParameterRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiParameter> ParameterMismatchedDataType { get; }
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiParameter> ParameterRequiredFields { get; }
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiParameter> PathParameterShouldBeInThePath { get; }
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiParameter> RequiredMustBeTrueWhenInIsPath { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiPathsRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiPaths> PathNameMustBeginWithSlash { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiResponseRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiResponse> ResponseRequiredFields { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiResponsesRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiResponses> ResponsesMustBeIdentifiedByDefaultOrStatusCode { get; }
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiResponses> ResponsesMustContainAtLeastOneResponse { get; }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false, Inherited=false)]
    public class AsyncApiRuleAttribute : System.Attribute
    {
        public AsyncApiRuleAttribute() { }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiSchemaRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiSchema> SchemaMismatchedDataType { get; }
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiSchema> ValidateSchemaDiscriminator { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiServerRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiServer> ServerRequiredFields { get; }
    }
    [RedGun.AsyncApi.Validations.Rules.AsyncApiRule]
    public static class AsyncApiTagRules
    {
        public static RedGun.AsyncApi.Validations.ValidationRule<RedGun.AsyncApi.Models.AsyncApiTag> TagRequiredFields { get; }
    }
}
namespace RedGun.AsyncApi.Writers
{
    public class FormattingStreamWriter : System.IO.StreamWriter
    {
        public FormattingStreamWriter(System.IO.Stream stream, System.IFormatProvider formatProvider) { }
        public override System.IFormatProvider FormatProvider { get; }
    }
    public interface IAsyncApiWriter
    {
        void Flush();
        void WriteEndArray();
        void WriteEndObject();
        void WriteNull();
        void WritePropertyName(string name);
        void WriteRaw(string value);
        void WriteStartArray();
        void WriteStartObject();
        void WriteValue(bool value);
        void WriteValue(decimal value);
        void WriteValue(int value);
        void WriteValue(object value);
        void WriteValue(string value);
    }
    public class AsyncApiJsonWriter : RedGun.AsyncApi.Writers.AsyncApiWriterBase
    {
        public AsyncApiJsonWriter(System.IO.TextWriter textWriter) { }
        public AsyncApiJsonWriter(System.IO.TextWriter textWriter, RedGun.AsyncApi.Writers.AsyncApiWriterSettings settings) { }
        protected override int BaseIndentation { get; }
        public override void WriteEndArray() { }
        public override void WriteEndObject() { }
        public override void WriteNull() { }
        public override void WritePropertyName(string name) { }
        public override void WriteRaw(string value) { }
        public override void WriteStartArray() { }
        public override void WriteStartObject() { }
        public override void WriteValue(string value) { }
        protected override void WriteValueSeparator() { }
    }
    public static class AsyncApiWriterAnyExtensions
    {
        public static void WriteAny<T>(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, T any)
            where T : RedGun.AsyncApi.Any.IAsyncApiAny { }
        public static void WriteExtensions(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, System.Collections.Generic.IDictionary<string, RedGun.AsyncApi.Interfaces.IAsyncApiExtension> extensions, RedGun.AsyncApi.AsyncApiSpecVersion specVersion) { }
    }
    public abstract class AsyncApiWriterBase : RedGun.AsyncApi.Writers.IAsyncApiWriter
    {
        protected const string IndentationString = "  ";
        protected readonly System.Collections.Generic.Stack<RedGun.AsyncApi.Writers.Scope> Scopes;
        public AsyncApiWriterBase(System.IO.TextWriter textWriter) { }
        public AsyncApiWriterBase(System.IO.TextWriter textWriter, RedGun.AsyncApi.Writers.AsyncApiWriterSettings settings) { }
        protected abstract int BaseIndentation { get; }
        public RedGun.AsyncApi.Writers.AsyncApiWriterSettings Settings { get; set; }
        protected System.IO.TextWriter Writer { get; }
        protected RedGun.AsyncApi.Writers.Scope CurrentScope() { }
        public virtual void DecreaseIndentation() { }
        protected RedGun.AsyncApi.Writers.Scope EndScope(RedGun.AsyncApi.Writers.ScopeType type) { }
        public void Flush() { }
        public virtual void IncreaseIndentation() { }
        protected bool IsArrayScope() { }
        protected bool IsObjectScope() { }
        protected bool IsTopLevelScope() { }
        protected RedGun.AsyncApi.Writers.Scope StartScope(RedGun.AsyncApi.Writers.ScopeType type) { }
        protected void VerifyCanWritePropertyName(string name) { }
        public abstract void WriteEndArray();
        public abstract void WriteEndObject();
        public virtual void WriteIndentation() { }
        public abstract void WriteNull();
        public abstract void WritePropertyName(string name);
        public abstract void WriteRaw(string value);
        public abstract void WriteStartArray();
        public abstract void WriteStartObject();
        public virtual void WriteValue(bool value) { }
        public virtual void WriteValue(System.DateTime value) { }
        public virtual void WriteValue(System.DateTimeOffset value) { }
        public virtual void WriteValue(decimal value) { }
        public virtual void WriteValue(double value) { }
        public virtual void WriteValue(int value) { }
        public virtual void WriteValue(long value) { }
        public virtual void WriteValue(object value) { }
        public virtual void WriteValue(float value) { }
        public abstract void WriteValue(string value);
        protected abstract void WriteValueSeparator();
    }
    public static class AsyncApiWriterExtensions
    {
        public static void WriteOptionalCollection(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, System.Collections.Generic.IEnumerable<string> elements, System.Action<RedGun.AsyncApi.Writers.IAsyncApiWriter, string> action) { }
        public static void WriteOptionalCollection<T>(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, System.Collections.Generic.IEnumerable<T> elements, System.Action<RedGun.AsyncApi.Writers.IAsyncApiWriter, T> action)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiElement { }
        public static void WriteOptionalMap(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, System.Collections.Generic.IDictionary<string, string> elements, System.Action<RedGun.AsyncApi.Writers.IAsyncApiWriter, string> action) { }
        public static void WriteOptionalMap<T>(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, System.Collections.Generic.IDictionary<string, T> elements, System.Action<RedGun.AsyncApi.Writers.IAsyncApiWriter, T> action)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiElement { }
        public static void WriteOptionalMap<T>(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, System.Collections.Generic.IDictionary<string, T> elements, System.Action<RedGun.AsyncApi.Writers.IAsyncApiWriter, string, T> action)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiElement { }
        public static void WriteOptionalObject<T>(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, T value, System.Action<RedGun.AsyncApi.Writers.IAsyncApiWriter, T> action)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiElement { }
        public static void WriteProperty(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, string value) { }
        public static void WriteProperty(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, bool value, bool defaultValue = false) { }
        public static void WriteProperty(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, bool? value, bool defaultValue = false) { }
        public static void WriteProperty<T>(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, T value)
            where T :  struct { }
        public static void WriteProperty<T>(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, T? value)
            where T :  struct { }
        public static void WriteRequiredCollection<T>(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, System.Collections.Generic.IEnumerable<T> elements, System.Action<RedGun.AsyncApi.Writers.IAsyncApiWriter, T> action)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiElement { }
        public static void WriteRequiredMap(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, System.Collections.Generic.IDictionary<string, string> elements, System.Action<RedGun.AsyncApi.Writers.IAsyncApiWriter, string> action) { }
        public static void WriteRequiredMap<T>(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, System.Collections.Generic.IDictionary<string, T> elements, System.Action<RedGun.AsyncApi.Writers.IAsyncApiWriter, T> action)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiElement { }
        public static void WriteRequiredObject<T>(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, T value, System.Action<RedGun.AsyncApi.Writers.IAsyncApiWriter, T> action)
            where T : RedGun.AsyncApi.Interfaces.IAsyncApiElement { }
        public static void WriteRequiredProperty(this RedGun.AsyncApi.Writers.IAsyncApiWriter writer, string name, string value) { }
    }
    public class AsyncApiWriterSettings
    {
        public AsyncApiWriterSettings() { }
        public RedGun.AsyncApi.Writers.ReferenceInlineSetting ReferenceInline { get; set; }
    }
    public class AsyncApiYamlWriter : RedGun.AsyncApi.Writers.AsyncApiWriterBase
    {
        public AsyncApiYamlWriter(System.IO.TextWriter textWriter) { }
        public AsyncApiYamlWriter(System.IO.TextWriter textWriter, RedGun.AsyncApi.Writers.AsyncApiWriterSettings settings) { }
        protected override int BaseIndentation { get; }
        public bool UseLiteralStyle { get; set; }
        public override void WriteEndArray() { }
        public override void WriteEndObject() { }
        public override void WriteNull() { }
        public override void WritePropertyName(string name) { }
        public override void WriteRaw(string value) { }
        public override void WriteStartArray() { }
        public override void WriteStartObject() { }
        public override void WriteValue(string value) { }
        protected override void WriteValueSeparator() { }
    }
    public enum ReferenceInlineSetting
    {
        DoNotInlineReferences = 0,
        InlineLocalReferences = 1,
        InlineAllReferences = 2,
    }
    public sealed class Scope
    {
        public Scope(RedGun.AsyncApi.Writers.ScopeType type) { }
        public bool IsInArray { get; set; }
        public int ObjectCount { get; set; }
        public RedGun.AsyncApi.Writers.ScopeType Type { get; }
    }
    public enum ScopeType
    {
        Object = 0,
        Array = 1,
    }
    public static class SpecialCharacterStringExtensions { }
}